/*
数据类型的转换：
   小的数据类型------->大数据类型    自动类型转换

   大的数据类型------->小数据类型   强制类型转换

   强制类型转换的格式：

       小数据类型  变量名=（小数据类型）大数据类型


   负数的存储过程：

    -7---->1111001

	1.先去负数的绝对值，求出该绝对值的二进制形式（原码）
	2.原码取反得到反码
	3.反码+1得到补码



	如何通过补码得到真实的数据：
	1。补码先-1
	2.取反
	3.在数据前面加上负号即可


     1111001（补码）
    -0000001
	----------------

取反 1111000
    ----------------
	 0000111 ----------    -7





	 数据转换要注意的细节：

	 1.凡是byte、short、char类型数据在运算的时候都会自动转换成int类型的数据再运算。
     2.两个不同数据类型的数据在运算的时候，结果取决于大的数据类型


  */
class Demo02 
{
	public static void main(String[] args) 
	{

		/*
		byte b=11;//1个字节
		short s=b;//2个字节
		int i=s;//4个字节
		long l=i;//8个字节
		
		int i=128;//4个字节
		byte b=(byte) i;//1个字节

		System.out.println(b);// -128

		//如果是附属，南无最高位肯定是1，整数的二进制位的最高位是0.
		

		
        System.out.println(Integer.toBinaryString(-7));
        //1111001
		//sun给我们提供一个功能Integer.toBinaryString（）查看一个数据的二进制数据的形式的。
         
		

		byte b1=1;
		byte b2=2;
		byte b3=(byte)(b1+b2);
		System.out.println(b3);  //3 


		System.out.println((int)'a');//97
		
        
		int i=10;
		long l=20;
		i=(int)(i+l);
		System.out.println(i);

		*/
		byte b=10;  //
		//byte b=i;  一个整数没有加上任何标识的时候默认，默认是int类型的数据
		//10是一个常量，编译器在编译的时候就能够确认常量的值，byte b=10，在编译的时候
		//java编译器就会检查到10并没有超过byte的标识范围，所以允许赋值。
		//java编译器在编译的时候并不能确认变量所存储的值，变量存储的值是在运行的时候才在内存中分配空间的

		System.out.println(b);
	}
}
